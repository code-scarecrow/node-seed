image: node:22-alpine
clone:
  depth: full
definitions:
  caches:
    sonar: ~/.sonar/cache
  services:
    docker-xl:
      memory: 4096
      type: docker
    docker-l:
      memory: 2048
      type: docker

  steps:
    - step: &linter-check
        name: Linter Check
        caches:
          - node
        script:
          - echo $NPMRC_FILE | base64 -d > .npmrc
          - npm install
          - npm run check-lint

    - step: &test-arch
        name: Test arch
        caches:
          - node
        script:
          - echo $NPMRC_FILE | base64 -d > .npmrc
          - npm install
          - npm run test:arch

    - step: &test-unit
        name: Test unit
        artifacts:
          - coverage/**
        caches:
          - node
        script:
          - echo $NPMRC_FILE | base64 -d > .npmrc
          - npm install
          - npm run test:cov

    - step: &test-e2e
        name: Test e2e
        size: 4x
        services: [docker-l]
        artifacts:
          - coverage/**
        caches:
          - node
        script:
          - echo $NPMRC_FILE | base64 -d > .npmrc
          - npm install
          - npm run test:e2e:cov

    - step: &sonarcloud
        name: Analyze on SonarCloud
        size: 4x
        caches:
          - sonar
        services: [docker-xl]
        script:
          - pipe: sonarsource/sonarcloud-scan:2.0.0
            variables:
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.sources="src" -Dsonar.exclusions="**/migrations/**,src/main.ts" -Dsonar.javascript.lcov.reportPaths=coverage/unit/lcov.info,coverage/integration/lcov.info -Dsonar.projectName=${BITBUCKET_REPO_SLUG}'

    - step: &check-quality-gate-sonarcloud
        name: Check the Quality Gate on SonarCloud
        script:
          - pipe: sonarsource/sonarcloud-quality-gate:0.1.6
            variables:
              SONAR_TOKEN: ${SONAR_TOKEN}

    - step: &build
        size: 4x
        name: build image
        services: [docker-xl]
        caches:
          - docker
        script:
          - pipe: docker://pickittechnology/bitbucket-build-2:1.0.0
            variables:
              AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}'
              AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}'
              NPMRC_FILE: '${NPMRC_FILE}'
              ENV: '${ENV}'

    - step: &deploy
        name: deploy
        script:
          - pipe: docker://pickittechnology/bitbucket-deploy-2:1.0.0
            variables:
              AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}'
              AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}'
              ENV: '${ENV}'

options:
  max-time: 15
  docker: true

pipelines:
  pull-requests:
    '*/*':
      - parallel:
          - step: *linter-check
          - step: *test-arch
          - step: *test-unit
          - step: *test-e2e
      - step: *sonarcloud
      - step: *check-quality-gate-sonarcloud

  branches:
    develop:
      - parallel:
          - step:
              <<: *build
              deployment: Develop-build
          - step: *linter-check
          - step: *test-arch
          - step: *test-unit
          - step: *test-e2e
      - parallel:
          - step: *sonarcloud
          - step:
              <<: *deploy
              deployment: Develop

    test:
      - parallel:
          - step:
              <<: *build
              deployment: Test-build
          - step: *linter-check
          - step: *test-arch
          - step: *test-unit
          - step: *test-e2e
      - parallel:
          - step: *sonarcloud
          - step:
              <<: *deploy
              deployment: Test

    release:
      - parallel:
          - step:
              <<: *build
              deployment: Preprod-build
          - step: *linter-check
          - step: *test-arch
          - step: *test-unit
          - step: *test-e2e
      - parallel:
          - step: *sonarcloud
          - step:
              <<: *deploy
              deployment: Preprod

    master:
      - parallel:
          - step:
              <<: *build
              deployment: Prod-build
          - step: *linter-check
          - step: *test-arch
          - step: *test-unit
          - step: *test-e2e
      - parallel:
          - step: *sonarcloud
          - step:
              <<: *deploy
              trigger: manual
              deployment: Prod
