module.exports = {
	parser: '@typescript-eslint/parser',
	parserOptions: {
		project: 'tsconfig.json',
		tsconfigRootDir: __dirname,
		sourceType: 'module',
	},
	plugins: ['@typescript-eslint/eslint-plugin', 'function-name', 'folders'],
	extends: ['plugin:@typescript-eslint/recommended', 'plugin:prettier/recommended'],
	root: true,
	env: {
		node: true,
	},
	ignorePatterns: ['.eslintrc.js', '**/migrations/**'],
	rules: {
		quotes: ['error', 'single', 'avoid-escape'],
		'no-unused-vars': 'off',
		'@typescript-eslint/no-unused-vars': [
			'error',
			{
				argsIgnorePattern: '^_',
				varsIgnorePattern: '^_',
				caughtErrorsIgnorePattern: '^_',
			},
		],
		'@typescript-eslint/no-empty-function': 'off',
		'@typescript-eslint/adjacent-overload-signatures': 'warn',
		'@typescript-eslint/array-type': ['error', { default: 'array' }],
		'@typescript-eslint/await-thenable': 'warn',
		'@typescript-eslint/ban-ts-comment': 'error',
		'@typescript-eslint/ban-tslint-comment': 'error',
		'@typescript-eslint/ban-types': 'error',
		'@typescript-eslint/class-literal-property-style': 'off',
		'@typescript-eslint/consistent-generic-constructors': ['warn', 'type-annotation'],
		'@typescript-eslint/consistent-indexed-object-style': 'off',
		'@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'as' }],
		'@typescript-eslint/consistent-type-exports': 'off',
		'@typescript-eslint/consistent-type-imports': 'off',
		'@typescript-eslint/explicit-function-return-type': 'error',
		'@typescript-eslint/explicit-member-accessibility': ['error', { overrides: { constructors: 'off' } }],
		'@typescript-eslint/explicit-module-boundary-types': 'off',
		'@typescript-eslint/member-ordering': 'off',
		'@typescript-eslint/method-signature-style': ['error', 'method'],
		'@typescript-eslint/no-base-to-string': 'error',
		'@typescript-eslint/no-confusing-non-null-assertion': 'off',
		'@typescript-eslint/no-confusing-void-expression': 'off',
		'@typescript-eslint/no-duplicate-enum-values': 'error',
		'@typescript-eslint/no-dynamic-delete': 'error',
		'@typescript-eslint/no-empty-interface': 'error',
		'@typescript-eslint/no-explicit-any': 'error',
		'@typescript-eslint/no-extra-non-null-assertion': 'error',
		'@typescript-eslint/no-extraneous-class': 'error',
		'@typescript-eslint/no-floating-promises': 'error',
		'@typescript-eslint/no-for-in-array': 'off',
		'@typescript-eslint/no-inferrable-types': 'error',
		'@typescript-eslint/no-invalid-void-type': 'error',
		'@typescript-eslint/no-meaningless-void-operator': 'error',
		'@typescript-eslint/no-non-null-assertion': 'error',
		'no-restricted-syntax': [
			'error',
			{
				selector: 'ExportDefaultDeclaration',
				message: 'Prefer named exports',
			},
		],
		'require-await': 'off',
		'@typescript-eslint/require-await': 'error',
		'no-duplicate-imports': 'error',
		'@typescript-eslint/no-unnecessary-condition': 'error',
		'no-shadow': 'off',
		'@typescript-eslint/no-shadow': 'error',
		'function-name/starts-with-verb': [
			'error',
			{
				whitelist: ['configure'],
			},
		],
		'no-nested-ternary': 'error',
		'folders/match-regex': ['error', '^[a-z-]+$', 'src'],
		'folders/match-regex': ['error', '^([1-9]_)?[a-z-1-9]+$', 'test'],
	},
};
